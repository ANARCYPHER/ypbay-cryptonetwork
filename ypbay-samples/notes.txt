*****************node main.js******************
https://www.youtube.com/watch?v=HneatE69814
NOW INCREASE DIFFICULTY=====================****

class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 4;
    }

main8.js
*************************************************
TEST CREATED BLOCK'S && MINING

ypbay_
λ code .

C:\ypbay_
λ npm install --save crypto-js
npm WARN saveError ENOENT: no such file or directory, open 'C:\ypbay_\package.json'
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN enoent ENOENT: no such file or directory, open 'C:\ypbay_\package.json'
npm WARN ypbay_ No description
npm WARN ypbay_ No repository field.
npm WARN ypbay_ No README data
npm WARN ypbay_ No license field.

+ crypto-js@4.0.0
added 1 package from 1 contributor and audited 1 package in 1.838s
found 0 vulnerabilities


C:\ypbay_
λ node main.js
{
    "chain": [
        {
            "index": 0,
            "timestamp": "01/01/2021",
            "data": "Genesis block",
            "previousHash": "0",
            "hash": "52c3017aebfe51d1d96a66f2a8c855b748f55279c80420c2d2c8281b099c937d"
        },
        {
            "index": 1,
            "timestamp": "10/07/2021",
            "data": {
                "amount": 4
            },
            "previousHash": "52c3017aebfe51d1d96a66f2a8c855b748f55279c80420c2d2c8281b099c937d",
            "hash": "7459c258fa2a1332477dd8237ec6c2195e6d9510650acd418aa364cff0cbd099"
        },
        {
            "index": 2,
            "timestamp": "12/07/2021",
            "data": {
                "amount": 10
            },
            "previousHash": "7459c258fa2a1332477dd8237ec6c2195e6d9510650acd418aa364cff0cbd099",
            "hash": "3c2f0579e3331866e2d0c3e2babafe17a1cb5317f130dae57612fd2e031b00c1"
        }
    ]
}

C:\ypbay_
λ node main1.js
{
    "chain": [
        {
            "index": 0,
            "timestamp": "01/01/2021",
            "data": "Genesis block",
            "previousHash": "0",
            "hash": "52c3017aebfe51d1d96a66f2a8c855b748f55279c80420c2d2c8281b099c937d"
        },
        {
            "index": 1,
            "timestamp": "10/07/2021",
            "data": {
                "amount": 4
            },
            "previousHash": "52c3017aebfe51d1d96a66f2a8c855b748f55279c80420c2d2c8281b099c937d",
            "hash": "7459c258fa2a1332477dd8237ec6c2195e6d9510650acd418aa364cff0cbd099"
        },
        {
            "index": 2,
            "timestamp": "12/07/2021",
            "data": {
                "amount": 10
            },
            "previousHash": "7459c258fa2a1332477dd8237ec6c2195e6d9510650acd418aa364cff0cbd099",
            "hash": "3c2f0579e3331866e2d0c3e2babafe17a1cb5317f130dae57612fd2e031b00c1"
        }
    ]
}

C:\ypbay_
λ node main.js
Is blockchain valid? true

C:\ypbay_
λ node main2.js
Is blockchain valid? true

C:\ypbay_
λ node main.js
internal/modules/cjs/loader.js:883
  throw err;
  ^

Error: Cannot find module 'C:\ypbay_\main.js'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)
    at Function.Module._load (internal/modules/cjs/loader.js:725:27)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}

C:\ypbay_
λ node main2.js
Is blockchain valid? true

C:\ypbay_
λ node maain.js
internal/modules/cjs/loader.js:883
  throw err;
  ^

Error: Cannot find module 'C:\ypbay_\maain.js'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)
    at Function.Module._load (internal/modules/cjs/loader.js:725:27)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}

C:\ypbay_
λ node main.js
internal/modules/cjs/loader.js:883
  throw err;
  ^

Error: Cannot find module 'C:\ypbay_\main.js'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)
    at Function.Module._load (internal/modules/cjs/loader.js:725:27)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}

C:\ypbay_
λ node main3.js
Is blockchain valid? true
Is blockchain valid? false

C:\ypbay_
λ node main3.js
Is blockchain valid? true
Is blockchain valid? false

C:\ypbay_
λ node main4.js
Is blockchain valid? true
C:\ypbay_\main4.js:61
ypBay.chain[1].hash = ypBay.createGenesisBlock[1].calculateHash();
                                                  ^

TypeError: Cannot read property 'calculateHash' of undefined
    at Object.<anonymous> (C:\ypbay_\main4.js:61:51)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47

C:\ypbay_
λ node main4.js
Is blockchain valid? true

C:\ypbay_
λ node main5.js
C:\ypbay_\main5.js:1
MODIFICATIONS
^

ReferenceError: MODIFICATIONS is not defined
    at Object.<anonymous> (C:\ypbay_\main5.js:1:1)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47

C:\ypbay_
λ node main5.js
Mining block 1...
Block mined: 00b0925881c520b4c692e0e62c6803e6163299bf28ade76bdd6d2e3347c58bd1
Mining block 2...
Block mined: 0068a8049e25b5a31518635dd53b1df965e24e504b531dc91cc3c50f599e37fc

C:\ypbay_
λ node main6.js
Mining block 1...
Block mined: 00b0925881c520b4c692e0e62c6803e6163299bf28ade76bdd6d2e3347c58bd1
Mining block 2...
Block mined: 0068a8049e25b5a31518635dd53b1df965e24e504b531dc91cc3c50f599e37fc

C:\ypbay_
λ node main7.js

C:\ypbay_
λ node main.js

 Starting the miner...
Block mined: 00b656073aaab914e26042eab57bb4e96848323a8363949fcd12ad9c0d1b5ab4
Block sucessfully mined!
C:\ypbay_\main.js:71
            for(const trans of block.transaction){
                                     ^

TypeError: block.transaction is not iterable
    at Blockchain.getBalanceOfAddress (C:\ypbay_\main.js:71:38)
    at Object.<anonymous> (C:\ypbay_\main.js:110:46)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47

C:\ypbay_
λ node main7.js
Mining block 1...
Block mined: 0000368b8e77c0e07127b80b507a5d921f9b481cba95fdcfe4fc7195958c1d10
Mining block 2...
Block mined: 0000a9ec0a47bb2ac8c738c79d162ea33132af9c762ece0deb961de229dc8f4a

C:\ypbay_
λ node main7.js
Mining block 1...
Block mined: 0000368b8e77c0e07127b80b507a5d921f9b481cba95fdcfe4fc7195958c1d10
Mining block 2...
Block mined: 0000a9ec0a47bb2ac8c738c79d162ea33132af9c762ece0deb961de229dc8f4a

C:\ypbay_
λ node main7.js
Mining block 1...
Block mined: 0000368b8e77c0e07127b80b507a5d921f9b481cba95fdcfe4fc7195958c1d10
Mining block 2...
Block mined: 0000a9ec0a47bb2ac8c738c79d162ea33132af9c762ece0deb961de229dc8f4a

C:\ypbay_
λ node main.js
Mining block 1...
^C
C:\ypbay_
λ node main.js
Mining block 1...
Block mined: 00000c5c5d3f23bb5de4041868d3ec688ad62116e674fd9b03c30f681edcdbae
Mining block 2...
Block mined: 000001283fd3b6b5bce65f2dc931721d2df690909675a4409026c96cc1e7a905

C:\ypbay_

about ====================main9.js
----------------------------------
//Block Mine test difficulty ex |line 33 this.difficulty = 5;
const SHA256 = require('crypto-js/sha256');

class Block{
    constructor(index, timestamp, data, previousHash = ''){
         this.index = index;
         this.timestamp = timestamp = timestamp;
         this.data = data;
         this.previousHash = previousHash;
         this.hash = this.calculateHash();
         this.nonce = 0; 
    }

      calculateHash(){
          return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();
      }
      
      mineBlock(difficulty){
          while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")){
              this.nonce++;
              this.hash = this.calculateHash();
          }

          console.log("Block mined: " + this.hash);
      }
}


class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()];
        //this.difficulty = 9;
        this.difficulty = 3;
    }

    createGenesisBlock(){
        return new Block(0, "01/01/2021", "Genesis block", "0");
        
    }

    getLatestBlock(){
        return this.chain[this.chain.length - 1];
    }

    addBlock(newBlock){
        newBlock.previousHash = this.getLatestBlock().hash;       
        newBlock.mineBlock(this.difficulty);
        this.chain.push(newBlock);
    }

    isChainValid(){
        for(let i = 1; i < this.chain.length; i++){
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            if(currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }

            if(currentBlock.previousHash !== previousBlock.hash){
                return false; 
            }
        }

        return true;
    }
}

let ypBay = new Blockchain();

console.log("Mining block 1...");
ypBay.addBlock(new Block(1, "20/07/2021", {amount: 4 }));

console.log("Mining block 2...");
ypBay.addBlock(new Block(2, "20/07/2021", {amount: 8 }));

======================================================
******************************************************
******************************************************
======================================================
const SHA256 = require('crypto-js/sha256');

class Transaction{
    constructor(fromAddress, toAddress, amount){
        this.fromAddress = fromAddress;
        this.toAddress = toAddress;
        this.amount = amount;        
    }
}

class Block{
    constructor(timestamp, transactions, previousHash = ''){
         this.previousHash = previousHash;
         this.timestamp = timestamp;
         this.transactions = transactions;         
         this.hash = this.calculateHash();
         this.nonce = 0; 
    }

      calculateHash(){
          return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();
      }
      
      mineBlock(difficulty){
          while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")){
              this.nonce++;
              this.hash = this.calculateHash();
          }

          console.log("Block mined: " + this.hash);
      }
}

class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 2;
        this.pendingTransactions = [];
        this.miningReward = 100;
    }

    createGenesisBlock(){
        return new Block("01/01/2021", "Genesis block", "0");
        
    }

    getLatestBlock(){
        return this.chain[this.chain.length - 1];
    }

    minePendingTransactions(miningRewardAddress){
        let block = new Block(Date.now(), this.pendingTransactions);
        block.mineBlock(this.difficulty);

        console.log('Block sucessfully mined!');
        this.chain.push(block);

        this.pendingTransactions = [
            new Transaction(null, miningRewardAddress, this.miningReward)
        ];
    }

    createTransaction(transaction){
        this.pendingTransactions.push(transaction);
    }

    getBalanceOfAddress(address){
        let balance = 0;

        for(const block of this.chain){
            for(const trans of block.transaction){
                if(trans.fromAddress === address){
                    balance -= trans.amount;
                }

                if(trans.toAddress === address){
                    balance += trans.amount;
                }
            }
        }

        return balance;
    }

    isChainValid(){
        for(let i = 1; i < this.chain.length; i++){
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            if(currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }

            if(currentBlock.previousHash !== previousBlock.hash){
                return false; 
            }
        }

        return true;
    }
}

let ypBay = new Blockchain();
ypBay.createTransaction(new Transaction('address1', 'address2', 100));
ypBay.createTransaction(new Transaction('address2', 'address1', 50));

console.log('\n Starting the miner...');
ypBay.minePendingTransactions('xaviers-address');

console.log('\nBalance of xavier is', ypBay.getBalanceOfAddress('xaviers-address'));

console.log('\n Starting the miner again...');
ypBay.minePendingTransactions('xaviers-address');

console.log('\nBalance of xavier is', ypBay.getBalanceOfAddress('xaviers-address'));

*************=============================
*************=============================
*************=============================
*************=============================
*************=============================
==========================================
==========================================
==========================================
//Block Mine test difficulty ex |line 33 this.difficulty = 5;
const SHA256 = require('crypto-js/sha256');

class Transaction{
    constructor(fromAddress, toAddress, amount){
        this.fromAddress = fromAddress;
        this.toAddress = toAddress;
        this.amount = amount;        
    }
}

class Block{
    constructor(timestamp, transactions, previousHash = ''){
         this.previousHash = previousHash;          
         this.timestamp = timestamp = timestamp;
         this.transactions = transactions;         
         this.hash = this.calculateHash();
         this.nonce = 0; 
    }

      calculateHash(){
          return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();
      }
      
      mineBlock(difficulty){
          while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")){
              this.nonce++;
              this.hash = this.calculateHash();
          }

          console.log("Block mined: " + this.hash);
      }
}


class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()];        
        this.difficulty = 2;
        this.pendingTransactions = [];
        this.miningReward = 100; 
    }

    createGenesisBlock(){
        return new Block(0, "01/01/2021", "Genesis block", "0");
        
    }

    getLatestBlock(){
        return this.chain[this.chain.length - 1];
    }

    //addBlock(newBlock){
        //newBlock.previousHash = this.getLatestBlock().hash;       
        //newBlock.mineBlock(this.difficulty);
        //this.chain.push(newBlock);
    //}
    minePendingTransactions(miningRewardAddress){
        let block = new Block(Date.now(), this.pendingTransactions);
        block.mineBlock(this.difficulty);

        console.log('Block sucessfully mined!');
        this.chain.push(block);

        this.pendingTransactions = [
            new Transaction(null, miningRewardAddress, this.miningReward)
        ];
    }

    createTransaction(transaction){
        this.pendingTransactions.push(transaction);
    }

    getBalanceOfAddress(address){
        let balance = 0;

        for(const block of this.chain){
            for(const trans of block.transaction){
                if(trans.fromAddress === address){
                    balance -= trans.amount;
                }

                if(trans.toAddress === address){
                    balance += trans.amount;
                }
            }
        }

        return balance;
    }


isChainValid(){
        for(let i = 1; i < this.chain.length; i++){
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            if(currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }

            if(currentBlock.previousHash !== previousBlock.hash){
                return false; 
            }
        }

        return true;
    }
}

let ypBay = new Blockchain();
ypBay.createTransaction(new Transaction('address1', 'address2', 100));
ypBay.createTransaction(new Transaction('address2', 'address1', 50));

//console.log('\n Starting the miner...');
console.log('\n Starting the fucking...');
//ypBay.minePendingTransactions('xaviers-address');
ypBay.minePendingTransactions();
//console.log('\nBalance of xavier is', ypBay.getBalanceOfAddress('xaviers-address'));
console.log();

==================================================
===========The Problem++++++++++++++++++++++++++++

//console.log('\n Starting the miner...');
console.log('\n Starting the fucking...');
//ypBay.minePendingTransactions('xaviers-address');
ypBay.minePendingTransactions();
//console.log('\nBalance of xavier is', ypBay.getBalanceOfAddress('xaviers-address'));
console.log();
==========================Solution=????????????

another try OK..about mined not abot the user miner==

//Block Mine test difficulty ex |line 33 this.difficulty = 5;
const SHA256 = require('crypto-js/sha256');

class Transaction{
    constructor(fromAddress, toAddress, amount){
        this.fromAddress = fromAddress;
        this.toAddress = toAddress;
        this.amount = amount;        
    }
}

class Block{
    constructor(timestamp, transactions, previousHash = ''){
         this.previousHash = previousHash;          
         this.timestamp = timestamp = timestamp;
         this.transactions = transactions;         
         this.hash = this.calculateHash();
         this.nonce = 0; 
    }

      calculateHash(){
          return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();
      }
      
      mineBlock(difficulty){
          while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")){
              this.nonce++;
              this.hash = this.calculateHash();
          }

          console.log("Block mined: " + this.hash);
      }
}


class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()];        
        this.difficulty = 2;
        this.pendingTransactions = [];
        this.miningReward = 100; 
    }

    createGenesisBlock(){
        return new Block(0, "01/01/2021", "Genesis block", "0");
        
    }

    getLatestBlock(){
        return this.chain[this.chain.length - 1];
    }

    //addBlock(newBlock){
        //newBlock.previousHash = this.getLatestBlock().hash;       
        //newBlock.mineBlock(this.difficulty);
        //this.chain.push(newBlock);
    //}
    minePendingTransactions(miningRewardAddress){
        let block = new Block(Date.now(), this.pendingTransactions);
        block.mineBlock(this.difficulty);

        console.log('Block sucessfully mined!');
        this.chain.push(block);

        this.pendingTransactions = [
            new Transaction(null, miningRewardAddress, this.miningReward)
        ];
    }

    createTransaction(transaction){
        this.pendingTransactions.push(transaction);
    }

    getBalanceOfAddress(address){
        let balance = 0;

        for(const block of this.chain){
            for(const trans of block.transaction){
                if(trans.fromAddress === address){
                    balance -= trans.amount;
                }

                if(trans.toAddress === address){
                    balance += trans.amount;
                }
            }
        }

        return balance;
    }


isChainValid(){
        for(let i = 1; i < this.chain.length; i++){
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            if(currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }

            if(currentBlock.previousHash !== previousBlock.hash){
                return false; 
            }
        }

        return true;
    }
}

let ypBay = new Blockchain();
ypBay.createTransaction(new Transaction('address1', 'address2', 100));
ypBay.createTransaction(new Transaction('address2', 'address1', 50));

//console.log('\n Starting the miner...');
console.log('\n Starting the fucking...');
//ypBay.minePendingTransactions('xaviers-address');
ypBay.minePendingTransactions();
//console.log('\nBalance of xavier is', ypBay.getBalanceOfAddress('xaviers-address'));
console.log();

//console.log('\n Starting the miner...');
console.log('\n Starting the fucking..again');
//ypBay.minePendingTransactions('xaviers-address');
ypBay.minePendingTransactions();
//console.log('\nBalance of xavier is', ypBay.getBalanceOfAddress('xaviers-address'));
console.log();